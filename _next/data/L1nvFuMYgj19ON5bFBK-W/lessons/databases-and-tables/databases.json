{"pageProps":{"post":{"attributes":{},"html":"<p>Let&#39;s get started by making our very first database. For our first project we are going to be making a recipe website.</p>\n<blockquote>\n<p>If you haven&#39;t gotten your Docker container with Postgres 14 running in the previous lesson, please do that now.</p>\n</blockquote>\n<p>Let&#39;s connect to the running database by running the following:</p>\n<pre><code class=\"language-bash\">docker exec -u postgres -it pg psql\n</code></pre>\n<p>This should connects us to the running <code>pg</code> (which we named as such) container as the user <code>postgres</code> in an interactive session (via the <code>-it</code> flags) to run the bash command <code>psql</code>. If you were just running this locally, you could likely just run <code>psql</code> and it would work. Only thing you&#39;d need to make sure you can auth correctly.</p>\n<h2 id=\"psql-commands\">psql commands</h2>\n<p>psql has a bunch of built in commands to help you navigate around. All of these are going to begin with <code>\\</code>. Try <code>\\?</code> to bring up the help list.</p>\n<p>For now we&#39;re interested in what databases we have available to us. Try running <code>\\l</code> to list all databases. You&#39;ll likely see the databases postgres, template0, and template1.</p>\n<h2 id=\"default-databases\">Default databases</h2>\n<p><code>template1</code> is what Postgres uses by default when you create a database. If you want your databases to have a default shape, you can modify template1 to suit that.</p>\n<p><code>template0</code> should never be modified. If your template1 gets out of whack, you can drop it and recreate from the fresh template0.</p>\n<p><code>postgres</code> exists for the purpose of a default database to connect to. We&#39;re actually connected to it by default since we didn&#39;t specify a database to connect to. You can technically could delete it but there&#39;s no reason to and a lot of tools and extensions do rely on it being there.</p>\n<h2 id=\"create-your-own\">Create your own</h2>\n<p>Okay let&#39;s create our own. Run this command in your database.</p>\n<pre><code class=\"language-sql\">CREATE DATABASE recipeguru;\n</code></pre>\n<blockquote>\n<p>Note if you kill your container, it will kill all the data with it and you will need to recreate everything if you do that. I do provide <a href=\"https://sql.holt.courses/recipes.sql\">this complete SQL file</a> that has <em>everything</em> for the recipeguru database but it&#39;s for the whole lesson so if you do need to restart it may be easier to go back and do the creation by hand. You can also just use the <a href=\"/lessons/welcome/docker\">container from Docker Hub</a>.</p>\n</blockquote>\n<p>A database is a collection of similar tables of data. For our recipe app we will store all our tables in one database. There&#39;s a lot of schools of thought of when to shove everything into one database versus when to decompose it all into various different databases. I generally think in terms of clients: if my app is going to be querying for the data, then I&#39;ll try to keep it in an app-oriented database. If I have another client that is going to be storing client analytics for my team to digest later, I&#39;d probably put that in a separate database. It&#39;s a bit vague of when you should, but think in terms of &quot;what if I had to scale these independently&quot; sorts of terms.</p>\n<p>Type <code>\\c recipeguru</code> to connect to our database. We were previously connected to the <code>postgres</code> default database.</p>\n<blockquote>\n<p>You may notice that I use all capitals when I write SQL terminology e.g. CREATE DATABASE or SELECT or INSERT INTO. Why? It&#39;s not required and lots of people <em>never</em> do the all caps thing so it&#39;s an opinion. I&#39;m doing it for you because I think it makes it easier to say &quot;this comes from SQL and this doesn&#39;t&quot;. You are free to decide what you think. In general in code I&#39;ll do the all caps but if I&#39;m just messing around in psql I&#39;ll do lowercase.</p>\n</blockquote>\n","slug":"databases","title":"Databases","section":"Databases and Tables","icon":"database","filePath":"/home/runner/work/complete-intro-to-sql/complete-intro-to-sql/lessons/02-databases-and-tables/A-databases.md","nextSlug":"/lessons/databases-and-tables/tables","prevSlug":"/lessons/welcome/docker"}},"__N_SSG":true}