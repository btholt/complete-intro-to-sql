{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>The next thing we need to learn is how to update a field. We&#39;ve seen how to INSERT and do an update if an INSERT fails, but let&#39;s see how to update something directly.</p>\n<pre><code class=\"language-sql\">UPDATE ingredients SET image = &#39;watermelon.jpg&#39; WHERE title = &#39;watermelon&#39;;\n</code></pre>\n<p>The WHERE clause is where you filter down what you want to update. In this case there&#39;s only one watermelon so it&#39;ll just update one but if you had many watermelons it would match all of those and update all of them,</p>\n<p>You probably got a line returned something like</p>\n<pre><code class=\"language-plaintext\">UPDATE 1\n</code></pre>\n<p>If you want to return what was updated try:</p>\n<pre><code class=\"language-sql\">UPDATE ingredients SET image = &#39;watermelon.jpg&#39; WHERE title = &#39;watermelon&#39; RETURNING id, title, image;\n</code></pre>\n<p>The RETURNING clause tells Postgres you want to return those columns of the things you&#39;ve updated. In our case I had it return literally everything we have in the table so you could write that as</p>\n<pre><code class=\"language-sql\">UPDATE ingredients SET image = &#39;watermelon.jpg&#39; WHERE title = &#39;watermelon&#39; RETURNING *;\n</code></pre>\n<p>The * means &quot;everything&quot; in this case.</p>\n<p>Let&#39;s add two rows with identical images.</p>\n<pre><code class=\"language-sql\">INSERT INTO ingredients\n  (title, image)\nVALUES\n  (&#39;not real 1&#39;, &#39;delete.jpg&#39;),\n  (&#39;not real 2&#39;, &#39;delete.jpg&#39;);\n</code></pre>\n<blockquote>\n<p>Whitespace isn&#39;t significant in SQL. You can break lines up however you want and how they make sense to you.</p>\n</blockquote>\n<p>Now let&#39;s update both.</p>\n<pre><code class=\"language-sql\">UPDATE ingredients\nSET image = &#39;different.jpg&#39;\nWHERE image=&#39;delete.jpg&#39;\nRETURNING id, title, image;\n</code></pre>\n<p>Here you can see as long as that WHERE clause matches multiple rows, it&#39;ll update all the rows involved.</p>\n<h2 id=\"delete\">DELETE</h2>\n<p>Deletes are very similar in SQL.</p>\n<pre><code class=\"language-sql\">DELETE FROM ingredients\nWHERE image=&#39;different.jpg&#39;\nRETURNING *;\n</code></pre>\n<p>Here we just have no SET clause. Anything that matches that WHERE clause will be deleted. The RETURNING, like in updates, is optional if you want to see what was deleted.</p>\n","slug":"updates-and-deletes","title":"Updates and Deletes","section":"Data","icon":"table","filePath":"/home/runner/work/complete-intro-to-sql/complete-intro-to-sql/lessons/03-data/B-updates-and-deletes.md","nextSlug":"/lessons/data/selects","prevSlug":"/lessons/data/inserts"}},"__N_SSG":true}