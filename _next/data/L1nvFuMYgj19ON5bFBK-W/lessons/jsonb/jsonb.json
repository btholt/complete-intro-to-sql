{"pageProps":{"post":{"attributes":{"description":"","title":"JSONB"},"html":"<p>Let&#39;s add a JSONB field to our recipes. We&#39;ll call it <code>meta</code> as in metadata but we could call it anything. And keep in mind this is just a normal JSON object. You can have arrays, nested objects, whatever.</p>\n<pre><code class=\"language-sql\">ALTER TABLE recipes\nADD COLUMN meta JSONB;\n</code></pre>\n<p>That&#39;s easy enough. Okay, let&#39;s now add a few rows to it. Keep in mind that it does have to be valid JSON or Postgres won&#39;t let you add it.</p>\n<pre><code class=\"language-sql\">UPDATE\n  recipes\nSET\n  meta=&#39;{ &quot;tags&quot;: [&quot;chocolate&quot;, &quot;dessert&quot;, &quot;cake&quot;] }&#39;\nWHERE\n  recipe_id=16;\n\nUPDATE\n  recipes\nSET\n  meta=&#39;{ &quot;tags&quot;: [&quot;dessert&quot;, &quot;cake&quot;] }&#39;\nWHERE\n  recipe_id=20;\n\nUPDATE\n  recipes\nSET\n  meta=&#39;{ &quot;tags&quot;: [&quot;dessert&quot;, &quot;fruit&quot;] }&#39;\nWHERE\n  recipe_id=45;\n\nUPDATE\n  recipes\nSET\n  meta=&#39;{ &quot;tags&quot;: [&quot;dessert&quot;, &quot;fruit&quot;] }&#39;\nWHERE\n  recipe_id=47;\n</code></pre>\n<p>Okay, let&#39;s select all tags from any recipe that has meta data.</p>\n<pre><code class=\"language-sql\">SELECT meta -&gt; &#39;tags&#39; FROM recipes WHERE meta IS NOT NULL;\n</code></pre>\n<p>The <code>-&gt;</code> is an accessor. In JS terms, this is like saying <code>meta.tags</code>. If we were accessing another layer of nesting, you just use more <code>-&gt;</code>. Ex. <code>SELECT meta -&gt; &#39;name&#39; -&gt; &#39;first&#39;</code>.</p>\n<p>Let&#39;s try selecting just the first element of each one using that.</p>\n<pre><code class=\"language-sql\">SELECT meta -&gt; &#39;tags&#39; -&gt; 0 FROM recipes WHERE meta IS NOT NULL;\n</code></pre>\n<p>This should give you back only the first item of each. Notice they&#39;re still weirdly in <code>&quot;&quot;</code>. This is because the <code>-&gt;</code> selector gives you back a JSON object so you can keep accessing it. If you want it back as just text, you use <code>-&gt;&gt;</code>.</p>\n<pre><code class=\"language-sql\">SELECT meta -&gt; &#39;tags&#39; -&gt;&gt; 0 FROM recipes WHERE meta IS NOT NULL;\n</code></pre>\n<p>Notice the first one <code>-&gt;</code> because we need tags back as a JSON object (because accessors don&#39;t work on text) but we use <code>-&gt;&gt;</code> on the second one so we can get the text back. Not always important but it bit me a few times and I wanted to help you.</p>\n<p>Alright, let&#39;s select all the cakes.</p>\n<pre><code class=\"language-sql\">SELECT recipe_id, title, meta -&gt; &#39;tags&#39; FROM recipes WHERE meta -&gt; &#39;tags&#39; ? &#39;cake&#39;;\nSELECT recipe_id, title, meta -&gt; &#39;tags&#39; FROM recipes WHERE meta -&gt; &#39;tags&#39; @&gt; &#39;&quot;cake&quot;&#39;;\n</code></pre>\n<p>Both of these work. The first one with the <code>?</code> checks to see if &#39;cake&#39; is a top level key available in which case it is.</p>\n<p>The second with the <code>@&gt;</code> is doing a &quot;does this array contains this value. That&#39;s why we do need the extra double quotes, since it is a string in a JSON value.</p>\n","slug":"jsonb","title":"JSONB","section":"JSONB","icon":"code","filePath":"/home/runner/work/complete-intro-to-sql/complete-intro-to-sql/lessons/05-jsonb/B-jsonb.md","nextSlug":"/lessons/jsonb/when-to-use","prevSlug":"/lessons/jsonb/unstructured-data"}},"__N_SSG":true}