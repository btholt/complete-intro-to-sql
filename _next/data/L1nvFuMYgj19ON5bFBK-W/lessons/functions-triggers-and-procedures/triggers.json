{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>Let&#39;s talk about triggers. Let&#39;s say you have a function that you want to run reactively to some event happening in your database. This is what a trigger is for.</p>\n<p>For example, let&#39;s say we need an audit trail of the names of recipes. Maybe we have a bug we&#39;re tracking down or it&#39;s important for us to be able to say &quot;this recipe used to be called this but we&#39;ve since edited it.&quot; A trigger is perfect for this.</p>\n<p>Quickly let&#39;s make a table that will serve as our repository for this data.</p>\n<pre><code class=\"language-sql\">CREATE TABLE updated_recipes (\n  id INT GENERATED ALWAYS AS IDENTITY,\n  recipe_id INT,\n  old_title VARCHAR (255),\n  new_title VARCHAR (255),\n  time_of_update TIMESTAMP\n);\n</code></pre>\n<p>The <code>TIMESTAMP</code> data type is new to you but this is just a standard way of storing a time in PostgreSQL. Try <code>SELECT NOW()</code> to see what one looks like.</p>\n<pre><code class=\"language-sql\">CREATE OR REPLACE FUNCTION log_updated_recipe_name()\n  RETURNS\n    TRIGGER\n  LANGUAGE\n    plpgsql\nAS\n$$\nBEGIN\n  IF OLD.title &lt;&gt; NEW.title THEN\n    INSERT INTO\n      updated_recipes (recipe_id, old_title, new_title, time_of_update)\n    VALUES\n      (NEW.recipe_id, OLD.title, NEW.title, NOW());\n  END IF;\n  RETURN NEW;\nEND;\n$$;\n</code></pre>\n<p>Another function here but with a bit more logic. Here we&#39;re asking if the title changed between <code>OLD</code> (what was there before) and <code>NEW</code> (what is there now). If <code>body</code> updated this trigger wouldn&#39;t do anything because it only checks title. If that conditional is true we run an insert statement and then we end.</p>\n<p>Make sure you have that RETURN NEW. Functions have to return what the SELECT would expect to get back. In this case we&#39;re just giving back NEW. You can have a trigger intercept and modify inserts, updates, etc.</p>\n<p>Keep in mind this just creates a function but doesn&#39;t yet bind it to an event. We need ot create a trigger that runs our function.</p>\n<p>Let&#39;s set up our trigger.</p>\n<pre><code class=\"language-sql\">CREATE OR REPLACE TRIGGER updated_recipe_trigger\nAFTER UPDATE ON recipes\n  FOR EACH ROW EXECUTE PROCEDURE log_updated_recipe_name();\n</code></pre>\n<p>This takes our function that we created and binds it to the update events on recipes. You can do this on inserts, deletes, and all sorts of other events. We&#39;re also running this <em>after</em> the insert happens. If you wanted to prevent certain updates or modify them, you could run this before as well.</p>\n<p>This is a rudimentary intro to triggers but there&#39;s a lot more you can do here! This is just one thing.</p>\n<blockquote>\n<p>Note you can&#39;t run <em>procedures</em> as triggers. Triggers always deal with functions. However there&#39;s nothing preventing you from <code>CALL</code>ing a procedure from a function.</p>\n</blockquote>\n","slug":"triggers","title":"Triggers","section":"Functions Triggers and Procedures","icon":"stairs","filePath":"/home/runner/work/complete-intro-to-sql/complete-intro-to-sql/lessons/07-functions-triggers-and-procedures/C-triggers.md","nextSlug":"/lessons/the-movie-database/exercises","prevSlug":"/lessons/functions-triggers-and-procedures/procedures"}},"__N_SSG":true}