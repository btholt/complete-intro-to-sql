{"pageProps":{"post":{"attributes":{},"html":"<p>A little bonus fun puzzle for you.</p>\n<p>You can join tables to themselves. Why would you ever want to do that?</p>\n<p>Let&#39;s look at category_names. category_names contains all the names of categories and keywords and it contains multiple languages. The most common languages in our database are English and German. What if I wanted to find words that had German translations but not English? That way I could assign a translator to go translate that so we could have parity. This is a job for a table joined to itself.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span>\n  c1.category_id, c1.language <span class=\"hljs-keyword\">AS</span> de_lang, c1.name <span class=\"hljs-keyword\">as</span> de_name, c2.language <span class=\"hljs-keyword\">AS</span> en_lang, c2.name <span class=\"hljs-keyword\">AS</span> en_name\n<span class=\"hljs-keyword\">FROM</span>\n  category_names c1\n\n<span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span>\n  category_names c2\n<span class=\"hljs-keyword\">ON</span>\n  c1.category_id <span class=\"hljs-operator\">=</span> c2.category_id\n<span class=\"hljs-keyword\">AND</span>\n  c2.language <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;en&#x27;</span>\n\n<span class=\"hljs-keyword\">WHERE</span>\n  c2.language <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NULL</span>\n<span class=\"hljs-keyword\">AND</span>\n  c1.language <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;de&#x27;</span>\n\nLIMIT <span class=\"hljs-number\">50</span>;\n</code></pre>\n<ul>\n<li>You treat the self join just like any other, just give them different names in your query. I called the &quot;left&quot; side of my equation <code>c1</code> and the &quot;right&quot; <code>c2</code>.</li>\n<li>I used the LEFT JOIN because I want to have a row for <em>any</em> German category, whether it has a English row to join to or not.</li>\n<li>Then we use WHERE to limit c1 to de and to check to see where the <code>en</code> is null (which is left in because of the LEFT JOIN)</li>\n<li>If you set <code>IS NULL</code> to <code>IS NOT NULL</code> you&#39;ll see German and English translations in the same line.</li>\n</ul>\n<p>This is a bit of an advance use case and to be quite clear, I took a while to tinker with this to get it to be just what I wanted. Most people don&#39;t get it right the first time, just like programming in general.</p>\n","slug":"self-join","title":"Self Join","section":"Self Join","icon":"arrow-rotate-left","filePath":"/home/runner/work/complete-intro-to-sql/complete-intro-to-sql/lessons/14-self-join/A-self-join.md","nextSlug":"/lessons/conclusion/congrats","prevSlug":"/lessons/window-functions/window-functions"}},"__N_SSG":true}