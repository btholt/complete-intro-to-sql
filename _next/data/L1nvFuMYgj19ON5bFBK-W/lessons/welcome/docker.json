{"pageProps":{"post":{"attributes":{},"html":"<p>This is not intended to be a Docker course. If you do want a complete course on containers on Docker, <a href=\"https://frontendmasters.com/courses/complete-intro-containers/\">please watch my other course on Frontend Masters</a>.</p>\n<p>However, the <em>fastest</em> way we can get everyone up and running on PostgreSQL is to have everyone use Docker containers. Dockers allows any computer to run a lightweight emulation of a pre-made environment (typically Linux). In our case we&#39;re going to be using a premade Linux environment that has PostgreSQL already installed on it.</p>\n<h2 id=\"docker-desktop\">Docker Desktop</h2>\n<p><a href=\"https://www.docker.com/products/docker-desktop/\">Please go install Docker Desktop</a>. Docker Desktop is a product that gets Docker all set up for you without much effort regardless what OS you&#39;re using.</p>\n<p>You are welcome to use Docker without Docker Desktop but you&#39;re on your own that point.</p>\n<h2 id=\"the-command-line\">The Command Line</h2>\n<p>You will need to interact a bit with the command line, either via Linux/macOS&#39;s zsh/bash or via Window&#39;s PowerShell. If you need help with CLIs or Linux, <a href=\"https://frontendmasters.com/courses/linux-command-line/\">click here to see my course on Frontend Masters</a>.</p>\n<p>The amount of CLI usage should be fairly minimal and you should be able to just copy/paste exactly what I give you.</p>\n<h2 id=\"the-two-containers-youll-need\">The Two Containers You&#39;ll Need</h2>\n<p>We&#39;re going to use two containers:</p>\n<ul>\n<li><a href=\"https://hub.docker.com/_/postgres/\">PostgreSQL 14</a></li>\n<li><a href=\"https://hub.docker.com/r/btholt/complete-intro-to-sql\">btholt/complete-intro-to-sql</a></li>\n</ul>\n<p>The first is the base, official image of PostgreSQL 14 (the latest stable version as of writing.) I&#39;ll be using 14.3 but you can likely use anything that&#39;s 14.X. Normally they don&#39;t break things between version. If there&#39;s a new major stable version (e.g. 15.X, 16.X, etc.) I would not recommend taking the class using those. Things can break between major versions. Use 14.X for this course and then go see what&#39;s different after.</p>\n<p>The latter container is based on the same Postgres 14 container but preload it with a bunch of movie data from the <a href=\"https://www.omdbapi.com/\">Open Movie Database</a> as well as the complete RecipeGuru database. This is a dump of that database for us to play around with. This is based on <a href=\"https://github.com/credativ/omdb-postgresql\">this setup script by credativ</a>. If you ever break anything, just shut down your container and restart it.</p>\n<h2 id=\"get-running\">Get Running</h2>\n<blockquote>\n<p>Do note, these containers are quite large. Each is ~0.5GB.</p>\n</blockquote>\n<p>Run the following to get yourself prepped for the course (optionally, you can let Docker do it for you under the hood too)</p>\n<pre><code class=\"language-bash\">docker pull postgres:14\ndocker pull btholt/complete-intro-to-sql\n</code></pre>\n<p>To make sure you&#39;re working, run the following:</p>\n<pre><code class=\"language-bash\">docker run -e POSTGRES_PASSWORD=lol --name=pg --rm -d -p 5432:5432 postgres:14\n</code></pre>\n<p>This should run PostgreSQL in the background.</p>\n<ul>\n<li>We gave it a password of &quot;lol&quot; (feel free to change it to something different, I just remember lol because lol)</li>\n<li>We ran it with a name of <code>pg</code> so we can refer it with that shorthand</li>\n<li>We used the <code>--rm</code> flag so the container deletes itself afterwards (rather than leave its logs and such around)</li>\n<li>We ran it in the background with <code>-d</code>. Otherwise it&#39;ll start in the foreground.</li>\n<li>The <code>-p</code> allows us to expose port 5432 locally which is the port Postgres runs on by default.</li>\n</ul>\n<p>Run <code>docker ps</code> to see it running. You can also see it in the Docker Desktop app running under the containers tab.</p>\n<p>Now run <code>docker kill pg</code> to kill the container. This will shut down the container and since we ran it with <code>--rm</code> it&#39;ll clean itself up afterwards too. We can run the <code>docker run â€¦</code> to start it again.</p>\n<p>Okay, let&#39;s try connecting to it with psql, the CLI tool for connecting to Postgres.</p>\n<pre><code class=\"language-bash\"># Only run this if you don&#39;t have the container running. It&#39;ll error otherwise\ndocker run -e POSTGRES_PASSWORD=lol --name=pg --rm -d -p 5432:5432 postgres:14\n\ndocker exec -u postgres -it pg psql\n</code></pre>\n<p>Now you should be connected to Postgres and ready to run queries on a fresh Postgres instance!</p>\n","slug":"docker","title":"Docker","section":"Welcome","icon":"info-circle","filePath":"/home/runner/work/complete-intro-to-sql/complete-intro-to-sql/lessons/01-welcome/B-docker.md","nextSlug":"/lessons/databases-and-tables/databases","prevSlug":"/lessons/welcome/intro"}},"__N_SSG":true}